// Goは「静的型付け言語」
package main

import "fmt"

func main() {
	n := 9223372036854775807
	fmt.Println(n)

	// ・型変換
	num := 1        // int型
	by := byte(num) // byte型に型変換している
	fmt.Println(by)

	// 浮動小数点

	// eの後ろは10が基数の指数　10の-2乗は0.01
	flo1 := 1.0e2
	flo2 := 1e+2
	flo3 := 0.1e-2
	fmt.Println(flo1, flo2, flo3)
	fmt.Printf("%T, %T\n", flo1, flo2)

	// rune型：　unicodeコードポイントを表す特殊な整数型

	// 文字列型：　ダブルクオートで囲む
	// RAW文字列リテラル：　バッククオートで囲む　改行をそのまま表現する

	// 配列型
	a := [5]int{5, 6, 7, 8, 9}
	fmt.Println(a[2])

	// 次の場合、要素数は初期値の数になる(数を決めるのを省略できる)
	arr := [...]int{1, 2, 3} // 型は [3]int
	fmt.Println(arr)

	// * 配列型の拡張や縮小はできない　その役割は「スライス」というデータ型が担う

	// interface{}型

	// * すべての型と互換性を持つ
	// * 初期値としてnilという特殊な値を持つ

	// 文字と文字列の違い
	// 文字：　シングルクオートで囲む
	// 文字列：　ダブルクオートで囲む
	// 理由：　文字列は文字のスライスだから。
	// str[i] の中身は byte または rune 型として扱われ、単一の文字と比較できる
}