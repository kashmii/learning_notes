# データの変更

請求書データの作成・更新・削除

===
学習内容

React Server Actionsとは何か、そしてそれを使ってどのようにデータを変異させるのか。

フォームとサーバーコンポーネントの扱い方

ネイティブのformDataオブジェクトを扱うためのベストプラクティス。

revalidatePath API を使用してクライアントキャッシュを再検証する方法。

特定の ID を持つ動的なルートセグメントを作成する方法

React の useFormStatus フックを使用して楽観的な更新を行う方法

===

React Server Actions
非同期コードをサーバー上で直接実行できます。
これにより、データを変更するためのAPIエンドポイントを作成する必要がなくなります。
その代わりに、サーバー上で実行される非同期関数を記述し、クライアントまたはサーバーコンポーネントから呼び出すことができます

Server Actionsは、
POSTリクエスト、暗号化されたクロージャ、厳密な入力チェック、エラーメッセージのハッシュ化、ホストの制限などを行える

サーバーアクションはNext.jsのキャッシュとも深く統合されています

===

Create の手順: 新しい請求書を作成する手順は以下の通りです：

1 ユーザーの入力を取り込むフォームを作成します。
2 Server Actionを作成し、フォームから呼び出します。
3 Server Actionの内部で、formDataオブジェクトからデータを抽出します。
4 データを検証し、データベースに挿入する準備をします。
5 データを挿入し、エラーを処理します。
6 キャッシュを再検証し、ユーザーを請求書ページにリダイレクトします。

===

2 Create a SErver Action

'use server'を追加することで、ファイル内にエクスポートされたすべての関数をサーバー関数としてマークすることができます。
これらのサーバー関数は、クライアントコンポーネントやサーバーコンポーネントにインポートすることができます。

good to know:
HTMLでは、action属性にURLを渡します。このURLはフォームデータの送信先（通常はAPIエンドポイント）になります。
しかしReactでは、action属性は特別なpropとみなされます。つまり、Reactはアクションを呼び出すことができるように、action属性の上に構築します。
** 裏では、Server ActionsはPOST APIエンドポイントを作成します。**
これが、Server Actionsを使用する際にAPIエンドポイントを手動で作成する必要がない理由です。

===

4 Validate and prepare the data

6 revalidate and redirect
データベースが更新されると、/dashboard/invoicesパスが再検証され、サーバーから新鮮なデータが取得されます。
この時点で、ユーザーを /dashboard/invoices ページにリダイレクトします。Next.jsのredirect関数を使用します

## revalidatePath
与えられたパスに関連するデータを再取得するための関数です。
この関数は、データのキャッシュを更新するために使用されます。
与えられたパスに関連するデータを再取得するために、APIエンドポイントにリクエストを送信することができます。

===
===

updateの手順:
1 請求書 ID で新しい動的ルートセグメントを作成します。
2 ページパラメータから請求書IDを読み取ります。
3 データベースから特定の請求書を取得します。
4 請求書データをフォームに事前に入力します。
5 データベースの請求書データを更新します。

===

1 Create a dynamic route segment
Next.jsでは、正確なセグメント名がわからず、データに基づいてルートを作成したい場合に、ダイナミックルートセグメントを作成することができます。
たとえば、ブログ記事のタイトルや商品ページなどです。フォルダの名前を角括弧で囲むことで、動的なルートセグメントを作成できます。
たとえば、[id]、[post]、[slug]などです。

4 Pass the ID to the Server Action
Server Actionにidを渡します。次のようにidを引数として渡すことはできません
代わりに、JS bindを使用することができます。これにより、Server Actionに渡される値はすべてエンコードされます。

===
===

<Form invoice={invoice} のエラー文 (undefinedが含まれているがそれをこの型は受け付けないために発生している)

型 '{ amount: number; id: string; customer_id: string; status: "pending" | "paid"; } | undefined' を
型 'InvoiceForm' に割り当てることはできません。
型 'undefined' を型 'InvoiceForm' に割り当てることはできません。ts(2322)
edit-form.tsx(18, 3): 予期された型は、型 'IntrinsicAttributes & { invoice: InvoiceForm; customers: CustomerField[]; }'
 に対してここで宣言されたプロパティ 'invoice' から取得されています