Next.jsでは、ルートハンドラを使ってAPIエンドポイントを作成できる

JavaScriptパターンを使って並列データフェッチを実装する方法

React Server Components（サーバー上でデータを取得する）を使用している場合は、
APIレイヤーをスキップしてデータベースに直接問い合わせることができる

クライアントでデータを取得する際、データベースに直接問い合わせるべきではない

===

【サーバーコンポーネント概要】

サーバーコンポーネントは、クライアントとサーバーの間で動的なデータを取得して、
クライアントにレンダリングするためのコンポーネントです。
通常のReactコンポーネントはクライアントサイドでレンダリングされますが、サーバーコンポーネントはサーバーサイドで実行されます。
サーバーコンポーネントは、サーバー側でのデータフェッチやロジックの実行が可能で、
サーバーサイドのコンテキストで動作します。これにより、初期描画の際に、
動的なデータを含むコンテンツを生成することができます。

Server Componentsはpromiseをサポートしており、
データ取得のような非同期タスクのためのシンプルなソリューションを提供します。
useEffectやuseState、データ取得ライブラリに手を伸ばすことなく、async/await構文を使用できます。

どのサーバーコンポーネント内でもsqlを呼び出すことができます。
しかし、より簡単にコンポーネントをナビゲートできるように、すべてのデータクエリをdata.tsファイルに保持し、
コンポーネントにインポートできるようにしています


# 例：async / awaitを使用したデータの取得
export default async function Page() {
  return (

サーバーコンポーネント利用時の注意点１
データリクエストは意図せず互いにブロックし合い、リクエストのウォーターフォールを生み出している。

→ parallel data fetching　で解決する

しかし、このJavaScriptのパターンを使うことには1つ不利な点がある。
1つのデータリクエストが他のすべてのリクエストより遅い場合はどうなるのか？

