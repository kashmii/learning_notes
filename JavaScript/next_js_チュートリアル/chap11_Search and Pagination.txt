# 検索とページ分割(ページネーション)

===

Next.jsのAPIであるsearchParams、usePathname、useRouterの使い方を学びます。

URL検索パラメータを使用して、検索とページ分割(ページネーション)を実装します。

===

useSearchParams
 現在のURLのパラメータにアクセスできるようにします。
 例えば、このURL /dashboard/invoices?page=1&query=pendingの検索パラメータは以下のようになります：
 {page：'1', query：pending'}

 useRouterはクライアントサイドのルーティング情報を取得するためのツール


・'use client'
  これはクライアント・コンポーネントなので、イベント・リスナーやフックを使うことができます。

・URLSearchParams
  URLクエリ・パラメータを操作するためのユーティリティ・メソッドを提供するWeb APIです。
  複雑な文字列リテラルを作成する代わりに、?page=1&query=aのようなパラメータ文字列を取得するために使用することができます。

  params.set('query', term); は、URLのクエリパラメータを設定しています。
  ユーザーが検索ボックスに何かを入力すると、その入力値（この場合は term）がクエリパラメータとしてURLに追加され、
  それを元にサーバーからデータを取得します。

  (検索フォームの文字列を現在のパスに即時反映できる機能がNext.jsにある
  その際、ページをリロードすることなくURLが更新される)

* そのうち復習 * When to use the useSearchParams() hook vs. the searchParams prop?

===

Debouncing
関数が起動する速度を制限するプログラミングの手法

現在の検索フォーム： 1文字の入力ごとにリクエストが送信されており、多数のユーザーが利用するサービスだと良くない状態
修正後： ユーザーが入力を止めたときだけデータベースに問い合わせるようにする

ライブラリuse-debounceを使用することで、
指定したミリ秒のあいだに入力がないときにのみ関数を実行することができる

Debouncingの挙動
1. トリガーイベント：デバウンスすべきイベント（検索ボックスのキー入力など）が発生すると、タイマーがスタートする。
2. Wait: タイマーが切れる前に新しいイベントが発生すると、タイマーはリセットされる。
3. 実行：タイマーのカウントダウンが終了すると、デバウンス機能が実行される。

