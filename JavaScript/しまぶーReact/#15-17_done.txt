#15
「Custom Hooks（カスタムフック）の使い方、使いどころをマスターしよう」

Custom Hooks
 ... 名前が use で始まり、他のフックを呼び出せる関数
     useState, useCallback, useEffect などを使った処理を関数にまとめられる
     利点： まとめたhooksをコンポーネント化することでロジックを再利用できる、コードが読みやすくなる

     Hooksを呼び出す場所： トップレベルのみ（if文やfor文の中、return文では呼び出せない）
                        普通のJavaScriptの関数の中では呼び出せない
                        （そういった理由からHooksには use を頭につけることで他と区別している）

HooksとDOM要素込みのコンポーネント化の違い
  DOM要素込みのコンポーネント化
    要素とロジックをまとめてコンポーネント化する
    そのため、ロジックのみを再利用することはできない
  Hooks
    ロジックのみをまとめてコンポーネント化する
    そのため、ロジックを再利用することができる

===
#16

「Stateのリフトアップでページ間やコンポーネント間で値を共通化しよう！」

Stateのリフトアップ
 ... 複数のコンポーネントで同じ値を使いたい場合、その値を共通化するためにStateをコンポーネントの外に出すこと
     ReduxやRecoilと同様の機能

ページ間での状態共通化
* next.jsの機能
  _app.tsxの <Component> の引数に渡したものは全画面でアクセスできるようになる

  複数のコンポーネントで同じ値を使いたい場合、その値を親コンポーネントのpropsとして渡すこと
  （豆知識）子コンポーネントで複数の変数や関数を受け取るときはスプレッド構文を使うことで簡略に書ける

===
#17
「useMemo の使い方、useRouter の使い方」

useMemo
 ... 計算結果をメモ化するためのフック reactの機能

 useRouter
  ... ページ遷移を行うためのフック next.jsの機能

・2倍した数字を表示する
・useRouterを使ってページ遷移を行い背景色を変える

***
copilotの解説
「useMemo と useCallbackの違い」

useMemo と useCallback の主な違いは、それぞれが何をメモ化するかにあります。
両者の適切な使用は、パフォーマンスの最適化に役立ちます。

useMemo： 計算結果をメモ化します。つまり、高コストな計算を行う関数の結果を保存し、依存性が変更されたときにのみ再計算します。
  これにより、不必要な再計算を避けることができます。

useCallback： 関数自体をメモ化します。これは、関数が頻繁に再作成される場合や、関数を依存性として持つ他のフック
  （例えば、useEffect）に渡す場合に有用です。これにより、不必要な再レンダリングを避けることができます。
***


しまぶーの意見
「React のコンポーネントで何かを定義するときは、常にuseMemo や useCallback を使った方がいい」

useRouter
  Next.jsで提供される便利なReactフック
  ルーティングに関する情報にアクセスするために使用される
  現在のURLやクエリパラメータ、ルートなどの情報に簡単にアクセスできたり
  Router.pushメソッドを使用して新しいページに遷移することができる

exportについて
  const + アロー関数 で定義した場合はファイルの最後に export default で定義する必要がある

まとめ
  ここまでで学んだ知識を活用できれば、一般的なreactでの開発は行える
  新しい部分に進むよりもここまでで学んだことを使いこなせるようになるのがよい

