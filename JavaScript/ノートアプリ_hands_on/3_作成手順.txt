1. npx create-next-app@latest でサンプルアプリを作成
   不要なファイルを削除

2. next/fontの導入

3. Tailwind CSSの導入

4. Prismaの導入
  * sqliteを利用

5. seedデータの作成

6. globals/db.ts の作成 - server-only のインストール



== ここまでは設定などの下準備・次から実装 ==

7. トップページの実装
  a. headerコンポーネントを作成して、layout.tsxに設置
  b. コンテンツ部分を実装

8. 一覧ページの作成
  a. 一覧取得APIの作成実装 Route Handlersを使う
    ルートハンドラを使用すると、Web リクエスト API とレスポンス API を使用して、
    指定したルートのカスタムリクエストハンドラを作成できます。

    app/api/notes/route.tsを作成したことで、/api/notesにGETリクエストを送ると、ノート一覧を取得できるようになる

  b. 一覧表示コンポーネントの実装
    * swrをimport
        データフェッチ用のライブラリです。ノート一覧のクライアントサイドでの取得に使用します。
         SWR は、まずキャッシュからデータを返し（stale）、次にフェッチリクエストを送り（revalidate）、
         最後に最新のデータを持ってくるという戦略です。
          以下GPTより
            Reactアプリケーションのデータフェッチングを簡素化するためのライブラリ
            データの取得とキャッシュに関する複雑さを抽象化し、状態管理とデータフェッチングの機能を提供

  c. 一覧表示コンポーネントの実装(?)

9. ノートの作成ページの実装
  a. APIの実装
    * ノート登録の流れ
      1. リクエストをjson化
      2. zの型に変換(バリデーションもここで行う) # zUpsertNote.parse(data);
      3. データベースに保存 # prisma.note.create

  b. ページの実装

10. ノートの詳細・編集・削除ページの作成
  a. APIの実装
  b. 詳細ページ（コンポーネント・ページの実装）
  c. 編集ページ（コンポーネント・ページの実装）

11. 設定ページの実装
