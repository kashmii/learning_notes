【連結リスト】

データがメモリ上の連続したブロックに格納されないデータ構造

リスト = ノードの集合
リスト = 配列も連結リストも含む

連結リストでは、各要素はノード（node）と呼ばれます

【片方向リスト（singly-linked list）】

各ノードはデータを格納する変数（data）と、次のノードを指すポインタ変数（next）から構成されている

  ＜連結リストのメリットデメリット＞

  インデックス操作

  配列 ◯： インデックス演算は O(1) の時間計算量で実行できる（データが連続的に格納されているため）
  連結リスト： リストの長さに比例して O(n) の時間がかかる（データが連続的に格納されていないため）

  挿入（要素の追加）
    配列： 要素を追加するためには、配列の要素をひとつずつずらす必要があるため、O(n) の時間がかかる
    連結リスト ◯： ポインタを書き換えるだけなので、O(1) の時間で実行できる
      ※書き換えるポインタを探すために O(n) の時間がかかる場合もあることは注意

  削除
    連結リスト： リスト内を逆方向に移動するための直接的な機能がないため、
               特定のノードを削除する場合にはリスト上で線形探索を行う必要がある。これにはO(n) の時間計算量がかかる

【双方向リスト（doubly-linked list）】

